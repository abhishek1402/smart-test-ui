import { app, BrowserWindow, ipcMain, ipcRenderer } from 'electron';
import TestServies from './backend/testService';
import { ObjectId } from 'mongodb';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = async () => {
  // Create the browser window.

  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.

  // console.log(">>>>>>TEST>CASES>>>",testCases)
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // mainWindow.webContents.send('getAllTestCases', testCases);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
ipcMain.handle(
  'recordTest',
  async (
    event: any,
    {
      testCase,
      name,
      preTestId,
    }: { testCase: string; name: string; preTestId: string }
  ) => {
    // mainWindow.webContents.send('test123',"sdfsfd");

    const testCases = await TestServies.recordTestCase({
      mainWindow,
      testCase,
      name,
      preTestId,
    });
    return 'abhishek';
  }
);

ipcMain.handle('recordTestOnLocal', async (event: any, arg: any) => {
  // mainWindow.webContents.send('test123',"sdfsfd");

  const testCases = await TestServies.recordTestCaseOnLocal({
    mainWindow,
    preTestId: arg.preTestId,
  });
  return 'abhishek';
});
ipcMain.handle('getAllTestCases', async (event: any, arg: any) => {
  const testCases = await TestServies.getAllTestCases();

  return testCases;
});
ipcMain.handle('run-test', async (event: any, arg: any) => {
  console.log('test case', arg);
  const successfullRun = await TestServies.runTestCase({
    testCase: arg,
    mainWindow,
  });

  return successfullRun;
});

ipcMain.on('anything-asynchronous', (event, arg) => {
  //execute tasks on behalf of renderer process
  // console.log(arg) // prints "ping"
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
// ipcRenderer.send('anything-asynchronous', 'ping')
